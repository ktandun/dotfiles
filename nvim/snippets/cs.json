{"query":{"body":["        await using var database = new DatabaseContext();","","        await database.$1.FirstAsync($2);"],"prefix":"query"},"field":{"body":"private readonly $1;","prefix":"field"},"manytomany":{"prefix":"manytomany","body":["builder.HasMany(e => e.$1s)","\t.WithMany(e => e.$2)","\t.UsingEntity<$3Entity>(","\t\tl => l.HasOne<$1Entity>().WithMany().HasForeignKey(e => e.$1).OnDelete(DeleteBehavior.Restrict),","\t\tr => r.HasOne<$2Entity>().WithMany().HasForeignKey(e => e.$2).OnDelete(DeleteBehavior.Restrict));"]},"validator":{"body":["public class $1Validator : Validator<$1>","{","    public $1Validator()","    {","        RuleFor(e => e.$2).NotEmpty();","    }","}"],"prefix":"validator"},"endpoint":{"body":["using FastEndpoints;","","namespace SpecHelper.Portal.Api.Endpoints;","","public class ${1}Endpoint : Endpoint<${1}Request>","{","    public override void Configure()","    {","        Post(\"\/api\/${0}\");","        AllowAnonymous();","    }","","    public override async Task HandleAsync(${1}Request req, CancellationToken ct)","    {","        await SendOkAsync();","    }","}","","public record ${1}Request","{","}"],"prefix":"endpoint"},"entity":{"body":["using Microsoft.EntityFrameworkCore;","using Microsoft.EntityFrameworkCore.Metadata.Builders;","","public class $1Entity","{","\tpublic required Guid $1Id { get; set; }","","\tpublic class $1EntityConfiguration : IEntityTypeConfiguration<$1Entity>","\t{","\t\tpublic void Configure(EntityTypeBuilder<$1Entity> builder)","\t\t{","\t\t\tbuilder.HasKey(e => e.$1Id);","\t\t}","\t}","}"],"prefix":"entity"},"onetomany":{"prefix":"onetomany","body":["builder.HasOne(e => e.$1)","\t.WithMany(e => e.$2)","\t.HasForeignKey(e => e.$1Id)","\t.OnDelete(DeleteBehavior.Restrict);"]}}